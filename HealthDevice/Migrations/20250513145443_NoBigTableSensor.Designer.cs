// <auto-generated />
using System;
using HealthDevice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthDevice.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513145443_NoBigTableSensor")]
    partial class NoBigTableSensor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthDevice.DTO.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MacAddress");

                    b.ToTable("Sensors", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HealthDevice.Models.Arduino", b =>
                {
                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<bool>("isClaim")
                        .HasColumnType("boolean");

                    b.HasKey("MacAddress");

                    b.ToTable("Arduino");
                });

            modelBuilder.Entity("HealthDevice.Models.Caregiver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Caregiver");
                });

            modelBuilder.Entity("HealthDevice.Models.Elder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CaregiverId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("InvitedCaregiverId")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<bool>("OutOfPerimeter")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("InvitedCaregiverId");

                    b.HasIndex("MacAddress")
                        .IsUnique();

                    b.ToTable("Elder");
                });

            modelBuilder.Entity("HealthDevice.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("HealthDevice.Models.Perimeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<int?>("Radius")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Perimeter");
                });

            modelBuilder.Entity("HealthDevice.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByTokenHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("HealthDevice.Models.DistanceInfo", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.ToTable("DistanceInfo", (string)null);
                });

            modelBuilder.Entity("HealthDevice.Models.FallInfo", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.HasIndex("LocationId");

                    b.ToTable("FallInfo", (string)null);
                });

            modelBuilder.Entity("HealthDevice.Models.GPSData", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.ToTable("GPSData", (string)null);
                });

            modelBuilder.Entity("HealthDevice.Models.Heartrate", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<int>("Avgrate")
                        .HasColumnType("integer");

                    b.Property<int>("Lastrate")
                        .HasColumnType("integer");

                    b.Property<int>("Maxrate")
                        .HasColumnType("integer");

                    b.Property<int>("Minrate")
                        .HasColumnType("integer");

                    b.ToTable("Heartrates", (string)null);
                });

            modelBuilder.Entity("HealthDevice.Models.Spo2", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<float>("AvgSpO2")
                        .HasColumnType("real");

                    b.Property<float>("LastSpO2")
                        .HasColumnType("real");

                    b.Property<float>("MaxSpO2")
                        .HasColumnType("real");

                    b.Property<float>("MinSpO2")
                        .HasColumnType("real");

                    b.ToTable("SpO2", (string)null);
                });

            modelBuilder.Entity("HealthDevice.Models.Steps", b =>
                {
                    b.HasBaseType("HealthDevice.DTO.Sensor");

                    b.Property<int>("StepsCount")
                        .HasColumnType("integer");

                    b.ToTable("Steps", (string)null);
                });

            modelBuilder.Entity("HealthDevice.DTO.Sensor", b =>
                {
                    b.HasOne("HealthDevice.Models.Arduino", "Arduino")
                        .WithMany("Sensors")
                        .HasForeignKey("MacAddress");

                    b.Navigation("Arduino");
                });

            modelBuilder.Entity("HealthDevice.Models.Elder", b =>
                {
                    b.HasOne("HealthDevice.Models.Caregiver", "Caregiver")
                        .WithMany("Elders")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HealthDevice.Models.Caregiver", "InvitedCaregiver")
                        .WithMany("Invites")
                        .HasForeignKey("InvitedCaregiverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HealthDevice.Models.Arduino", "Arduino")
                        .WithOne("elder")
                        .HasForeignKey("HealthDevice.Models.Elder", "MacAddress")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Arduino");

                    b.Navigation("Caregiver");

                    b.Navigation("InvitedCaregiver");
                });

            modelBuilder.Entity("HealthDevice.Models.DistanceInfo", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.DistanceInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthDevice.Models.FallInfo", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.FallInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthDevice.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HealthDevice.Models.GPSData", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.GPSData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthDevice.Models.Heartrate", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.Heartrate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthDevice.Models.Spo2", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.Spo2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthDevice.Models.Steps", b =>
                {
                    b.HasOne("HealthDevice.DTO.Sensor", null)
                        .WithOne()
                        .HasForeignKey("HealthDevice.Models.Steps", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthDevice.Models.Arduino", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("elder");
                });

            modelBuilder.Entity("HealthDevice.Models.Caregiver", b =>
                {
                    b.Navigation("Elders");

                    b.Navigation("Invites");
                });
#pragma warning restore 612, 618
        }
    }
}
